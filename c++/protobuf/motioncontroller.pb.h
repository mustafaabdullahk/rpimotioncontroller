// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motioncontroller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_motioncontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_motioncontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_motioncontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_motioncontroller_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_motioncontroller_2eproto;
namespace motioncontroller {
class Analog2Digital;
class Analog2DigitalDefaultTypeInternal;
extern Analog2DigitalDefaultTypeInternal _Analog2Digital_default_instance_;
class Analog2DigitalConfig;
class Analog2DigitalConfigDefaultTypeInternal;
extern Analog2DigitalConfigDefaultTypeInternal _Analog2DigitalConfig_default_instance_;
class CommandResult;
class CommandResultDefaultTypeInternal;
extern CommandResultDefaultTypeInternal _CommandResult_default_instance_;
class Digital2Analog;
class Digital2AnalogDefaultTypeInternal;
extern Digital2AnalogDefaultTypeInternal _Digital2Analog_default_instance_;
class HelloReply;
class HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
class HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class SetDiffChnAnalog2Digital;
class SetDiffChnAnalog2DigitalDefaultTypeInternal;
extern SetDiffChnAnalog2DigitalDefaultTypeInternal _SetDiffChnAnalog2Digital_default_instance_;
}  // namespace motioncontroller
PROTOBUF_NAMESPACE_OPEN
template<> ::motioncontroller::Analog2Digital* Arena::CreateMaybeMessage<::motioncontroller::Analog2Digital>(Arena*);
template<> ::motioncontroller::Analog2DigitalConfig* Arena::CreateMaybeMessage<::motioncontroller::Analog2DigitalConfig>(Arena*);
template<> ::motioncontroller::CommandResult* Arena::CreateMaybeMessage<::motioncontroller::CommandResult>(Arena*);
template<> ::motioncontroller::Digital2Analog* Arena::CreateMaybeMessage<::motioncontroller::Digital2Analog>(Arena*);
template<> ::motioncontroller::HelloReply* Arena::CreateMaybeMessage<::motioncontroller::HelloReply>(Arena*);
template<> ::motioncontroller::HelloRequest* Arena::CreateMaybeMessage<::motioncontroller::HelloRequest>(Arena*);
template<> ::motioncontroller::SetDiffChnAnalog2Digital* Arena::CreateMaybeMessage<::motioncontroller::SetDiffChnAnalog2Digital>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace motioncontroller {

// ===================================================================

class HelloRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:motioncontroller.HelloRequest) */ {
 public:
  inline HelloRequest() : HelloRequest(nullptr) {}
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloRequest* New() const final {
    return CreateMaybeMessage<HelloRequest>(nullptr);
  }

  HelloRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "motioncontroller.HelloRequest";
  }
  protected:
  explicit HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_motioncontroller_2eproto);
    return ::descriptor_table_motioncontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:motioncontroller.HelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_motioncontroller_2eproto;
};
// -------------------------------------------------------------------

class HelloReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:motioncontroller.HelloReply) */ {
 public:
  inline HelloReply() : HelloReply(nullptr) {}
  virtual ~HelloReply();

  HelloReply(const HelloReply& from);
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloReply* New() const final {
    return CreateMaybeMessage<HelloReply>(nullptr);
  }

  HelloReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloReply& from);
  void MergeFrom(const HelloReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "motioncontroller.HelloReply";
  }
  protected:
  explicit HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_motioncontroller_2eproto);
    return ::descriptor_table_motioncontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:motioncontroller.HelloReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_motioncontroller_2eproto;
};
// -------------------------------------------------------------------

class CommandResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:motioncontroller.CommandResult) */ {
 public:
  inline CommandResult() : CommandResult(nullptr) {}
  virtual ~CommandResult();

  CommandResult(const CommandResult& from);
  CommandResult(CommandResult&& from) noexcept
    : CommandResult() {
    *this = ::std::move(from);
  }

  inline CommandResult& operator=(const CommandResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResult& operator=(CommandResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandResult* internal_default_instance() {
    return reinterpret_cast<const CommandResult*>(
               &_CommandResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandResult& a, CommandResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandResult* New() const final {
    return CreateMaybeMessage<CommandResult>(nullptr);
  }

  CommandResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandResult& from);
  void MergeFrom(const CommandResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "motioncontroller.CommandResult";
  }
  protected:
  explicit CommandResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_motioncontroller_2eproto);
    return ::descriptor_table_motioncontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandResultFieldNumber = 1,
  };
  // string command_result = 1;
  void clear_command_result();
  const std::string& command_result() const;
  void set_command_result(const std::string& value);
  void set_command_result(std::string&& value);
  void set_command_result(const char* value);
  void set_command_result(const char* value, size_t size);
  std::string* mutable_command_result();
  std::string* release_command_result();
  void set_allocated_command_result(std::string* command_result);
  private:
  const std::string& _internal_command_result() const;
  void _internal_set_command_result(const std::string& value);
  std::string* _internal_mutable_command_result();
  public:

  // @@protoc_insertion_point(class_scope:motioncontroller.CommandResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_motioncontroller_2eproto;
};
// -------------------------------------------------------------------

class Digital2Analog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:motioncontroller.Digital2Analog) */ {
 public:
  inline Digital2Analog() : Digital2Analog(nullptr) {}
  virtual ~Digital2Analog();

  Digital2Analog(const Digital2Analog& from);
  Digital2Analog(Digital2Analog&& from) noexcept
    : Digital2Analog() {
    *this = ::std::move(from);
  }

  inline Digital2Analog& operator=(const Digital2Analog& from) {
    CopyFrom(from);
    return *this;
  }
  inline Digital2Analog& operator=(Digital2Analog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Digital2Analog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Digital2Analog* internal_default_instance() {
    return reinterpret_cast<const Digital2Analog*>(
               &_Digital2Analog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Digital2Analog& a, Digital2Analog& b) {
    a.Swap(&b);
  }
  inline void Swap(Digital2Analog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Digital2Analog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Digital2Analog* New() const final {
    return CreateMaybeMessage<Digital2Analog>(nullptr);
  }

  Digital2Analog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Digital2Analog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Digital2Analog& from);
  void MergeFrom(const Digital2Analog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Digital2Analog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "motioncontroller.Digital2Analog";
  }
  protected:
  explicit Digital2Analog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_motioncontroller_2eproto);
    return ::descriptor_table_motioncontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kChannelVoltageFieldNumber = 2,
  };
  // string channel_name = 1;
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // float channel_voltage = 2;
  void clear_channel_voltage();
  float channel_voltage() const;
  void set_channel_voltage(float value);
  private:
  float _internal_channel_voltage() const;
  void _internal_set_channel_voltage(float value);
  public:

  // @@protoc_insertion_point(class_scope:motioncontroller.Digital2Analog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  float channel_voltage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_motioncontroller_2eproto;
};
// -------------------------------------------------------------------

class Analog2Digital PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:motioncontroller.Analog2Digital) */ {
 public:
  inline Analog2Digital() : Analog2Digital(nullptr) {}
  virtual ~Analog2Digital();

  Analog2Digital(const Analog2Digital& from);
  Analog2Digital(Analog2Digital&& from) noexcept
    : Analog2Digital() {
    *this = ::std::move(from);
  }

  inline Analog2Digital& operator=(const Analog2Digital& from) {
    CopyFrom(from);
    return *this;
  }
  inline Analog2Digital& operator=(Analog2Digital&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Analog2Digital& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Analog2Digital* internal_default_instance() {
    return reinterpret_cast<const Analog2Digital*>(
               &_Analog2Digital_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Analog2Digital& a, Analog2Digital& b) {
    a.Swap(&b);
  }
  inline void Swap(Analog2Digital* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Analog2Digital* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Analog2Digital* New() const final {
    return CreateMaybeMessage<Analog2Digital>(nullptr);
  }

  Analog2Digital* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Analog2Digital>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Analog2Digital& from);
  void MergeFrom(const Analog2Digital& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Analog2Digital* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "motioncontroller.Analog2Digital";
  }
  protected:
  explicit Analog2Digital(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_motioncontroller_2eproto);
    return ::descriptor_table_motioncontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelVoltage1FieldNumber = 1,
    kChannelVoltage2FieldNumber = 2,
    kChannelVoltage3FieldNumber = 3,
    kChannelVoltage4FieldNumber = 4,
    kChannelVoltage5FieldNumber = 5,
    kChannelVoltage6FieldNumber = 6,
    kChannelVoltage7FieldNumber = 7,
    kChannelVoltage8FieldNumber = 8,
  };
  // float channel_voltage_1 = 1;
  void clear_channel_voltage_1();
  float channel_voltage_1() const;
  void set_channel_voltage_1(float value);
  private:
  float _internal_channel_voltage_1() const;
  void _internal_set_channel_voltage_1(float value);
  public:

  // float channel_voltage_2 = 2;
  void clear_channel_voltage_2();
  float channel_voltage_2() const;
  void set_channel_voltage_2(float value);
  private:
  float _internal_channel_voltage_2() const;
  void _internal_set_channel_voltage_2(float value);
  public:

  // float channel_voltage_3 = 3;
  void clear_channel_voltage_3();
  float channel_voltage_3() const;
  void set_channel_voltage_3(float value);
  private:
  float _internal_channel_voltage_3() const;
  void _internal_set_channel_voltage_3(float value);
  public:

  // float channel_voltage_4 = 4;
  void clear_channel_voltage_4();
  float channel_voltage_4() const;
  void set_channel_voltage_4(float value);
  private:
  float _internal_channel_voltage_4() const;
  void _internal_set_channel_voltage_4(float value);
  public:

  // float channel_voltage_5 = 5;
  void clear_channel_voltage_5();
  float channel_voltage_5() const;
  void set_channel_voltage_5(float value);
  private:
  float _internal_channel_voltage_5() const;
  void _internal_set_channel_voltage_5(float value);
  public:

  // float channel_voltage_6 = 6;
  void clear_channel_voltage_6();
  float channel_voltage_6() const;
  void set_channel_voltage_6(float value);
  private:
  float _internal_channel_voltage_6() const;
  void _internal_set_channel_voltage_6(float value);
  public:

  // float channel_voltage_7 = 7;
  void clear_channel_voltage_7();
  float channel_voltage_7() const;
  void set_channel_voltage_7(float value);
  private:
  float _internal_channel_voltage_7() const;
  void _internal_set_channel_voltage_7(float value);
  public:

  // float channel_voltage_8 = 8;
  void clear_channel_voltage_8();
  float channel_voltage_8() const;
  void set_channel_voltage_8(float value);
  private:
  float _internal_channel_voltage_8() const;
  void _internal_set_channel_voltage_8(float value);
  public:

  // @@protoc_insertion_point(class_scope:motioncontroller.Analog2Digital)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float channel_voltage_1_;
  float channel_voltage_2_;
  float channel_voltage_3_;
  float channel_voltage_4_;
  float channel_voltage_5_;
  float channel_voltage_6_;
  float channel_voltage_7_;
  float channel_voltage_8_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_motioncontroller_2eproto;
};
// -------------------------------------------------------------------

class Analog2DigitalConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:motioncontroller.Analog2DigitalConfig) */ {
 public:
  inline Analog2DigitalConfig() : Analog2DigitalConfig(nullptr) {}
  virtual ~Analog2DigitalConfig();

  Analog2DigitalConfig(const Analog2DigitalConfig& from);
  Analog2DigitalConfig(Analog2DigitalConfig&& from) noexcept
    : Analog2DigitalConfig() {
    *this = ::std::move(from);
  }

  inline Analog2DigitalConfig& operator=(const Analog2DigitalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Analog2DigitalConfig& operator=(Analog2DigitalConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Analog2DigitalConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Analog2DigitalConfig* internal_default_instance() {
    return reinterpret_cast<const Analog2DigitalConfig*>(
               &_Analog2DigitalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Analog2DigitalConfig& a, Analog2DigitalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Analog2DigitalConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Analog2DigitalConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Analog2DigitalConfig* New() const final {
    return CreateMaybeMessage<Analog2DigitalConfig>(nullptr);
  }

  Analog2DigitalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Analog2DigitalConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Analog2DigitalConfig& from);
  void MergeFrom(const Analog2DigitalConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Analog2DigitalConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "motioncontroller.Analog2DigitalConfig";
  }
  protected:
  explicit Analog2DigitalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_motioncontroller_2eproto);
    return ::descriptor_table_motioncontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGainFieldNumber = 1,
    kDataRateFieldNumber = 2,
  };
  // int32 gain = 1;
  void clear_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 gain() const;
  void set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gain() const;
  void _internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 data_rate = 2;
  void clear_data_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 data_rate() const;
  void set_data_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_rate() const;
  void _internal_set_data_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:motioncontroller.Analog2DigitalConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_motioncontroller_2eproto;
};
// -------------------------------------------------------------------

class SetDiffChnAnalog2Digital PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:motioncontroller.SetDiffChnAnalog2Digital) */ {
 public:
  inline SetDiffChnAnalog2Digital() : SetDiffChnAnalog2Digital(nullptr) {}
  virtual ~SetDiffChnAnalog2Digital();

  SetDiffChnAnalog2Digital(const SetDiffChnAnalog2Digital& from);
  SetDiffChnAnalog2Digital(SetDiffChnAnalog2Digital&& from) noexcept
    : SetDiffChnAnalog2Digital() {
    *this = ::std::move(from);
  }

  inline SetDiffChnAnalog2Digital& operator=(const SetDiffChnAnalog2Digital& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDiffChnAnalog2Digital& operator=(SetDiffChnAnalog2Digital&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDiffChnAnalog2Digital& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDiffChnAnalog2Digital* internal_default_instance() {
    return reinterpret_cast<const SetDiffChnAnalog2Digital*>(
               &_SetDiffChnAnalog2Digital_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetDiffChnAnalog2Digital& a, SetDiffChnAnalog2Digital& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDiffChnAnalog2Digital* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDiffChnAnalog2Digital* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDiffChnAnalog2Digital* New() const final {
    return CreateMaybeMessage<SetDiffChnAnalog2Digital>(nullptr);
  }

  SetDiffChnAnalog2Digital* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDiffChnAnalog2Digital>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDiffChnAnalog2Digital& from);
  void MergeFrom(const SetDiffChnAnalog2Digital& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDiffChnAnalog2Digital* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "motioncontroller.SetDiffChnAnalog2Digital";
  }
  protected:
  explicit SetDiffChnAnalog2Digital(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_motioncontroller_2eproto);
    return ::descriptor_table_motioncontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // int32 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:motioncontroller.SetDiffChnAnalog2Digital)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_motioncontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:motioncontroller.HelloRequest.name)
  return _internal_name();
}
inline void HelloRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:motioncontroller.HelloRequest.name)
}
inline std::string* HelloRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:motioncontroller.HelloRequest.name)
  return _internal_mutable_name();
}
inline const std::string& HelloRequest::_internal_name() const {
  return name_.Get();
}
inline void HelloRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:motioncontroller.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:motioncontroller.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:motioncontroller.HelloRequest.name)
}
inline std::string* HelloRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:motioncontroller.HelloRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:motioncontroller.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// string message = 1;
inline void HelloReply::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:motioncontroller.HelloReply.message)
  return _internal_message();
}
inline void HelloReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:motioncontroller.HelloReply.message)
}
inline std::string* HelloReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:motioncontroller.HelloReply.message)
  return _internal_mutable_message();
}
inline const std::string& HelloReply::_internal_message() const {
  return message_.Get();
}
inline void HelloReply::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloReply::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:motioncontroller.HelloReply.message)
}
inline void HelloReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:motioncontroller.HelloReply.message)
}
inline void HelloReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:motioncontroller.HelloReply.message)
}
inline std::string* HelloReply::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloReply::release_message() {
  // @@protoc_insertion_point(field_release:motioncontroller.HelloReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:motioncontroller.HelloReply.message)
}

// -------------------------------------------------------------------

// CommandResult

// string command_result = 1;
inline void CommandResult::clear_command_result() {
  command_result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommandResult::command_result() const {
  // @@protoc_insertion_point(field_get:motioncontroller.CommandResult.command_result)
  return _internal_command_result();
}
inline void CommandResult::set_command_result(const std::string& value) {
  _internal_set_command_result(value);
  // @@protoc_insertion_point(field_set:motioncontroller.CommandResult.command_result)
}
inline std::string* CommandResult::mutable_command_result() {
  // @@protoc_insertion_point(field_mutable:motioncontroller.CommandResult.command_result)
  return _internal_mutable_command_result();
}
inline const std::string& CommandResult::_internal_command_result() const {
  return command_result_.Get();
}
inline void CommandResult::_internal_set_command_result(const std::string& value) {
  
  command_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommandResult::set_command_result(std::string&& value) {
  
  command_result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:motioncontroller.CommandResult.command_result)
}
inline void CommandResult::set_command_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:motioncontroller.CommandResult.command_result)
}
inline void CommandResult::set_command_result(const char* value,
    size_t size) {
  
  command_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:motioncontroller.CommandResult.command_result)
}
inline std::string* CommandResult::_internal_mutable_command_result() {
  
  return command_result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommandResult::release_command_result() {
  // @@protoc_insertion_point(field_release:motioncontroller.CommandResult.command_result)
  return command_result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandResult::set_allocated_command_result(std::string* command_result) {
  if (command_result != nullptr) {
    
  } else {
    
  }
  command_result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:motioncontroller.CommandResult.command_result)
}

// -------------------------------------------------------------------

// Digital2Analog

// string channel_name = 1;
inline void Digital2Analog::clear_channel_name() {
  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Digital2Analog::channel_name() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Digital2Analog.channel_name)
  return _internal_channel_name();
}
inline void Digital2Analog::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Digital2Analog.channel_name)
}
inline std::string* Digital2Analog::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:motioncontroller.Digital2Analog.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& Digital2Analog::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void Digital2Analog::_internal_set_channel_name(const std::string& value) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Digital2Analog::set_channel_name(std::string&& value) {
  
  channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:motioncontroller.Digital2Analog.channel_name)
}
inline void Digital2Analog::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:motioncontroller.Digital2Analog.channel_name)
}
inline void Digital2Analog::set_channel_name(const char* value,
    size_t size) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:motioncontroller.Digital2Analog.channel_name)
}
inline std::string* Digital2Analog::_internal_mutable_channel_name() {
  
  return channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Digital2Analog::release_channel_name() {
  // @@protoc_insertion_point(field_release:motioncontroller.Digital2Analog.channel_name)
  return channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Digital2Analog::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:motioncontroller.Digital2Analog.channel_name)
}

// float channel_voltage = 2;
inline void Digital2Analog::clear_channel_voltage() {
  channel_voltage_ = 0;
}
inline float Digital2Analog::_internal_channel_voltage() const {
  return channel_voltage_;
}
inline float Digital2Analog::channel_voltage() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Digital2Analog.channel_voltage)
  return _internal_channel_voltage();
}
inline void Digital2Analog::_internal_set_channel_voltage(float value) {
  
  channel_voltage_ = value;
}
inline void Digital2Analog::set_channel_voltage(float value) {
  _internal_set_channel_voltage(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Digital2Analog.channel_voltage)
}

// -------------------------------------------------------------------

// Analog2Digital

// float channel_voltage_1 = 1;
inline void Analog2Digital::clear_channel_voltage_1() {
  channel_voltage_1_ = 0;
}
inline float Analog2Digital::_internal_channel_voltage_1() const {
  return channel_voltage_1_;
}
inline float Analog2Digital::channel_voltage_1() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Analog2Digital.channel_voltage_1)
  return _internal_channel_voltage_1();
}
inline void Analog2Digital::_internal_set_channel_voltage_1(float value) {
  
  channel_voltage_1_ = value;
}
inline void Analog2Digital::set_channel_voltage_1(float value) {
  _internal_set_channel_voltage_1(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Analog2Digital.channel_voltage_1)
}

// float channel_voltage_2 = 2;
inline void Analog2Digital::clear_channel_voltage_2() {
  channel_voltage_2_ = 0;
}
inline float Analog2Digital::_internal_channel_voltage_2() const {
  return channel_voltage_2_;
}
inline float Analog2Digital::channel_voltage_2() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Analog2Digital.channel_voltage_2)
  return _internal_channel_voltage_2();
}
inline void Analog2Digital::_internal_set_channel_voltage_2(float value) {
  
  channel_voltage_2_ = value;
}
inline void Analog2Digital::set_channel_voltage_2(float value) {
  _internal_set_channel_voltage_2(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Analog2Digital.channel_voltage_2)
}

// float channel_voltage_3 = 3;
inline void Analog2Digital::clear_channel_voltage_3() {
  channel_voltage_3_ = 0;
}
inline float Analog2Digital::_internal_channel_voltage_3() const {
  return channel_voltage_3_;
}
inline float Analog2Digital::channel_voltage_3() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Analog2Digital.channel_voltage_3)
  return _internal_channel_voltage_3();
}
inline void Analog2Digital::_internal_set_channel_voltage_3(float value) {
  
  channel_voltage_3_ = value;
}
inline void Analog2Digital::set_channel_voltage_3(float value) {
  _internal_set_channel_voltage_3(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Analog2Digital.channel_voltage_3)
}

// float channel_voltage_4 = 4;
inline void Analog2Digital::clear_channel_voltage_4() {
  channel_voltage_4_ = 0;
}
inline float Analog2Digital::_internal_channel_voltage_4() const {
  return channel_voltage_4_;
}
inline float Analog2Digital::channel_voltage_4() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Analog2Digital.channel_voltage_4)
  return _internal_channel_voltage_4();
}
inline void Analog2Digital::_internal_set_channel_voltage_4(float value) {
  
  channel_voltage_4_ = value;
}
inline void Analog2Digital::set_channel_voltage_4(float value) {
  _internal_set_channel_voltage_4(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Analog2Digital.channel_voltage_4)
}

// float channel_voltage_5 = 5;
inline void Analog2Digital::clear_channel_voltage_5() {
  channel_voltage_5_ = 0;
}
inline float Analog2Digital::_internal_channel_voltage_5() const {
  return channel_voltage_5_;
}
inline float Analog2Digital::channel_voltage_5() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Analog2Digital.channel_voltage_5)
  return _internal_channel_voltage_5();
}
inline void Analog2Digital::_internal_set_channel_voltage_5(float value) {
  
  channel_voltage_5_ = value;
}
inline void Analog2Digital::set_channel_voltage_5(float value) {
  _internal_set_channel_voltage_5(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Analog2Digital.channel_voltage_5)
}

// float channel_voltage_6 = 6;
inline void Analog2Digital::clear_channel_voltage_6() {
  channel_voltage_6_ = 0;
}
inline float Analog2Digital::_internal_channel_voltage_6() const {
  return channel_voltage_6_;
}
inline float Analog2Digital::channel_voltage_6() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Analog2Digital.channel_voltage_6)
  return _internal_channel_voltage_6();
}
inline void Analog2Digital::_internal_set_channel_voltage_6(float value) {
  
  channel_voltage_6_ = value;
}
inline void Analog2Digital::set_channel_voltage_6(float value) {
  _internal_set_channel_voltage_6(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Analog2Digital.channel_voltage_6)
}

// float channel_voltage_7 = 7;
inline void Analog2Digital::clear_channel_voltage_7() {
  channel_voltage_7_ = 0;
}
inline float Analog2Digital::_internal_channel_voltage_7() const {
  return channel_voltage_7_;
}
inline float Analog2Digital::channel_voltage_7() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Analog2Digital.channel_voltage_7)
  return _internal_channel_voltage_7();
}
inline void Analog2Digital::_internal_set_channel_voltage_7(float value) {
  
  channel_voltage_7_ = value;
}
inline void Analog2Digital::set_channel_voltage_7(float value) {
  _internal_set_channel_voltage_7(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Analog2Digital.channel_voltage_7)
}

// float channel_voltage_8 = 8;
inline void Analog2Digital::clear_channel_voltage_8() {
  channel_voltage_8_ = 0;
}
inline float Analog2Digital::_internal_channel_voltage_8() const {
  return channel_voltage_8_;
}
inline float Analog2Digital::channel_voltage_8() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Analog2Digital.channel_voltage_8)
  return _internal_channel_voltage_8();
}
inline void Analog2Digital::_internal_set_channel_voltage_8(float value) {
  
  channel_voltage_8_ = value;
}
inline void Analog2Digital::set_channel_voltage_8(float value) {
  _internal_set_channel_voltage_8(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Analog2Digital.channel_voltage_8)
}

// -------------------------------------------------------------------

// Analog2DigitalConfig

// int32 gain = 1;
inline void Analog2DigitalConfig::clear_gain() {
  gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Analog2DigitalConfig::_internal_gain() const {
  return gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Analog2DigitalConfig::gain() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Analog2DigitalConfig.gain)
  return _internal_gain();
}
inline void Analog2DigitalConfig::_internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gain_ = value;
}
inline void Analog2DigitalConfig::set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Analog2DigitalConfig.gain)
}

// int32 data_rate = 2;
inline void Analog2DigitalConfig::clear_data_rate() {
  data_rate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Analog2DigitalConfig::_internal_data_rate() const {
  return data_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Analog2DigitalConfig::data_rate() const {
  // @@protoc_insertion_point(field_get:motioncontroller.Analog2DigitalConfig.data_rate)
  return _internal_data_rate();
}
inline void Analog2DigitalConfig::_internal_set_data_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_rate_ = value;
}
inline void Analog2DigitalConfig::set_data_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_rate(value);
  // @@protoc_insertion_point(field_set:motioncontroller.Analog2DigitalConfig.data_rate)
}

// -------------------------------------------------------------------

// SetDiffChnAnalog2Digital

// int32 channel_id = 1;
inline void SetDiffChnAnalog2Digital::clear_channel_id() {
  channel_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDiffChnAnalog2Digital::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDiffChnAnalog2Digital::channel_id() const {
  // @@protoc_insertion_point(field_get:motioncontroller.SetDiffChnAnalog2Digital.channel_id)
  return _internal_channel_id();
}
inline void SetDiffChnAnalog2Digital::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_id_ = value;
}
inline void SetDiffChnAnalog2Digital::set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:motioncontroller.SetDiffChnAnalog2Digital.channel_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace motioncontroller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_motioncontroller_2eproto
