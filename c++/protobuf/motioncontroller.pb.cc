// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motioncontroller.proto

#include "motioncontroller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace motioncontroller {
class HelloRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloRequest> _instance;
} _HelloRequest_default_instance_;
class HelloReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloReply> _instance;
} _HelloReply_default_instance_;
class CommandResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandResult> _instance;
} _CommandResult_default_instance_;
class Digital2AnalogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Digital2Analog> _instance;
} _Digital2Analog_default_instance_;
class Analog2DigitalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Analog2Digital> _instance;
} _Analog2Digital_default_instance_;
class Analog2DigitalConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Analog2DigitalConfig> _instance;
} _Analog2DigitalConfig_default_instance_;
class SetDiffChnAnalog2DigitalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetDiffChnAnalog2Digital> _instance;
} _SetDiffChnAnalog2Digital_default_instance_;
}  // namespace motioncontroller
static void InitDefaultsscc_info_Analog2Digital_motioncontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motioncontroller::_Analog2Digital_default_instance_;
    new (ptr) ::motioncontroller::Analog2Digital();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motioncontroller::Analog2Digital::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Analog2Digital_motioncontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Analog2Digital_motioncontroller_2eproto}, {}};

static void InitDefaultsscc_info_Analog2DigitalConfig_motioncontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motioncontroller::_Analog2DigitalConfig_default_instance_;
    new (ptr) ::motioncontroller::Analog2DigitalConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motioncontroller::Analog2DigitalConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Analog2DigitalConfig_motioncontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Analog2DigitalConfig_motioncontroller_2eproto}, {}};

static void InitDefaultsscc_info_CommandResult_motioncontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motioncontroller::_CommandResult_default_instance_;
    new (ptr) ::motioncontroller::CommandResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motioncontroller::CommandResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandResult_motioncontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandResult_motioncontroller_2eproto}, {}};

static void InitDefaultsscc_info_Digital2Analog_motioncontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motioncontroller::_Digital2Analog_default_instance_;
    new (ptr) ::motioncontroller::Digital2Analog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motioncontroller::Digital2Analog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Digital2Analog_motioncontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Digital2Analog_motioncontroller_2eproto}, {}};

static void InitDefaultsscc_info_HelloReply_motioncontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motioncontroller::_HelloReply_default_instance_;
    new (ptr) ::motioncontroller::HelloReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motioncontroller::HelloReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloReply_motioncontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HelloReply_motioncontroller_2eproto}, {}};

static void InitDefaultsscc_info_HelloRequest_motioncontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motioncontroller::_HelloRequest_default_instance_;
    new (ptr) ::motioncontroller::HelloRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motioncontroller::HelloRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloRequest_motioncontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HelloRequest_motioncontroller_2eproto}, {}};

static void InitDefaultsscc_info_SetDiffChnAnalog2Digital_motioncontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motioncontroller::_SetDiffChnAnalog2Digital_default_instance_;
    new (ptr) ::motioncontroller::SetDiffChnAnalog2Digital();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motioncontroller::SetDiffChnAnalog2Digital::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetDiffChnAnalog2Digital_motioncontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetDiffChnAnalog2Digital_motioncontroller_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_motioncontroller_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_motioncontroller_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_motioncontroller_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_motioncontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::HelloRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::HelloRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::HelloReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::HelloReply, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::CommandResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::CommandResult, command_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Digital2Analog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Digital2Analog, channel_name_),
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Digital2Analog, channel_voltage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2Digital, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2Digital, channel_voltage_1_),
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2Digital, channel_voltage_2_),
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2Digital, channel_voltage_3_),
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2Digital, channel_voltage_4_),
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2Digital, channel_voltage_5_),
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2Digital, channel_voltage_6_),
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2Digital, channel_voltage_7_),
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2Digital, channel_voltage_8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2DigitalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2DigitalConfig, gain_),
  PROTOBUF_FIELD_OFFSET(::motioncontroller::Analog2DigitalConfig, data_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::SetDiffChnAnalog2Digital, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motioncontroller::SetDiffChnAnalog2Digital, channel_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::motioncontroller::HelloRequest)},
  { 6, -1, sizeof(::motioncontroller::HelloReply)},
  { 12, -1, sizeof(::motioncontroller::CommandResult)},
  { 18, -1, sizeof(::motioncontroller::Digital2Analog)},
  { 25, -1, sizeof(::motioncontroller::Analog2Digital)},
  { 38, -1, sizeof(::motioncontroller::Analog2DigitalConfig)},
  { 45, -1, sizeof(::motioncontroller::SetDiffChnAnalog2Digital)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::motioncontroller::_HelloRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::motioncontroller::_HelloReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::motioncontroller::_CommandResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::motioncontroller::_Digital2Analog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::motioncontroller::_Analog2Digital_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::motioncontroller::_Analog2DigitalConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::motioncontroller::_SetDiffChnAnalog2Digital_default_instance_),
};

const char descriptor_table_protodef_motioncontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026motioncontroller.proto\022\020motioncontroll"
  "er\032\033google/protobuf/empty.proto\"\034\n\014Hello"
  "Request\022\014\n\004name\030\001 \001(\t\"\035\n\nHelloReply\022\017\n\007m"
  "essage\030\001 \001(\t\"\'\n\rCommandResult\022\026\n\016command"
  "_result\030\001 \001(\t\"\?\n\016Digital2Analog\022\024\n\014chann"
  "el_name\030\001 \001(\t\022\027\n\017channel_voltage\030\002 \001(\002\"\350"
  "\001\n\016Analog2Digital\022\031\n\021channel_voltage_1\030\001"
  " \001(\002\022\031\n\021channel_voltage_2\030\002 \001(\002\022\031\n\021chann"
  "el_voltage_3\030\003 \001(\002\022\031\n\021channel_voltage_4\030"
  "\004 \001(\002\022\031\n\021channel_voltage_5\030\005 \001(\002\022\031\n\021chan"
  "nel_voltage_6\030\006 \001(\002\022\031\n\021channel_voltage_7"
  "\030\007 \001(\002\022\031\n\021channel_voltage_8\030\010 \001(\002\"7\n\024Ana"
  "log2DigitalConfig\022\014\n\004gain\030\001 \001(\005\022\021\n\tdata_"
  "rate\030\002 \001(\005\".\n\030SetDiffChnAnalog2Digital\022\022"
  "\n\nchannel_id\030\001 \001(\0052\307\003\n\rDeviceService\022J\n\010"
  "SayHello\022\036.motioncontroller.HelloRequest"
  "\032\034.motioncontroller.HelloReply\"\000\022P\n\020GetD"
  "igitalValues\022\026.google.protobuf.Empty\032 .m"
  "otioncontroller.Analog2Digital\"\0000\001\022Q\n\nOu"
  "tVoltage\022 .motioncontroller.Digital2Anal"
  "og\032\037.motioncontroller.CommandResult\"\000\022d\n"
  "\027ConfigureAnalog2Digital\022&.motioncontrol"
  "ler.Analog2DigitalConfig\032\037.motioncontrol"
  "ler.CommandResult\"\000\022_\n\016SetDiffChannel\022*."
  "motioncontroller.SetDiffChnAnalog2Digita"
  "l\032\037.motioncontroller.CommandResult\"\000b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_motioncontroller_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_motioncontroller_2eproto_sccs[7] = {
  &scc_info_Analog2Digital_motioncontroller_2eproto.base,
  &scc_info_Analog2DigitalConfig_motioncontroller_2eproto.base,
  &scc_info_CommandResult_motioncontroller_2eproto.base,
  &scc_info_Digital2Analog_motioncontroller_2eproto.base,
  &scc_info_HelloReply_motioncontroller_2eproto.base,
  &scc_info_HelloRequest_motioncontroller_2eproto.base,
  &scc_info_SetDiffChnAnalog2Digital_motioncontroller_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_motioncontroller_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_motioncontroller_2eproto = {
  false, false, descriptor_table_protodef_motioncontroller_2eproto, "motioncontroller.proto", 1044,
  &descriptor_table_motioncontroller_2eproto_once, descriptor_table_motioncontroller_2eproto_sccs, descriptor_table_motioncontroller_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_motioncontroller_2eproto::offsets,
  file_level_metadata_motioncontroller_2eproto, 7, file_level_enum_descriptors_motioncontroller_2eproto, file_level_service_descriptors_motioncontroller_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_motioncontroller_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_motioncontroller_2eproto)), true);
namespace motioncontroller {

// ===================================================================

void HelloRequest::InitAsDefaultInstance() {
}
class HelloRequest::_Internal {
 public:
};

HelloRequest::HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:motioncontroller.HelloRequest)
}
HelloRequest::HelloRequest(const HelloRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:motioncontroller.HelloRequest)
}

void HelloRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HelloRequest_motioncontroller_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HelloRequest::~HelloRequest() {
  // @@protoc_insertion_point(destructor:motioncontroller.HelloRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HelloRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HelloRequest::ArenaDtor(void* object) {
  HelloRequest* _this = reinterpret_cast< HelloRequest* >(object);
  (void)_this;
}
void HelloRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HelloRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloRequest& HelloRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloRequest_motioncontroller_2eproto.base);
  return *internal_default_instance();
}


void HelloRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:motioncontroller.HelloRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "motioncontroller.HelloRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:motioncontroller.HelloRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "motioncontroller.HelloRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motioncontroller.HelloRequest)
  return target;
}

size_t HelloRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motioncontroller.HelloRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motioncontroller.HelloRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motioncontroller.HelloRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motioncontroller.HelloRequest)
    MergeFrom(*source);
  }
}

void HelloRequest::MergeFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motioncontroller.HelloRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void HelloRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motioncontroller.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloRequest::CopyFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motioncontroller.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRequest::IsInitialized() const {
  return true;
}

void HelloRequest::InternalSwap(HelloRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HelloReply::InitAsDefaultInstance() {
}
class HelloReply::_Internal {
 public:
};

HelloReply::HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:motioncontroller.HelloReply)
}
HelloReply::HelloReply(const HelloReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:motioncontroller.HelloReply)
}

void HelloReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HelloReply_motioncontroller_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HelloReply::~HelloReply() {
  // @@protoc_insertion_point(destructor:motioncontroller.HelloReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HelloReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HelloReply::ArenaDtor(void* object) {
  HelloReply* _this = reinterpret_cast< HelloReply* >(object);
  (void)_this;
}
void HelloReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HelloReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloReply& HelloReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloReply_motioncontroller_2eproto.base);
  return *internal_default_instance();
}


void HelloReply::Clear() {
// @@protoc_insertion_point(message_clear_start:motioncontroller.HelloReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "motioncontroller.HelloReply.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:motioncontroller.HelloReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "motioncontroller.HelloReply.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motioncontroller.HelloReply)
  return target;
}

size_t HelloReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motioncontroller.HelloReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motioncontroller.HelloReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motioncontroller.HelloReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motioncontroller.HelloReply)
    MergeFrom(*source);
  }
}

void HelloReply::MergeFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motioncontroller.HelloReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void HelloReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motioncontroller.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloReply::CopyFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motioncontroller.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReply::IsInitialized() const {
  return true;
}

void HelloReply::InternalSwap(HelloReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandResult::InitAsDefaultInstance() {
}
class CommandResult::_Internal {
 public:
};

CommandResult::CommandResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:motioncontroller.CommandResult)
}
CommandResult::CommandResult(const CommandResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command_result().empty()) {
    command_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command_result(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:motioncontroller.CommandResult)
}

void CommandResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandResult_motioncontroller_2eproto.base);
  command_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommandResult::~CommandResult() {
  // @@protoc_insertion_point(destructor:motioncontroller.CommandResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandResult::ArenaDtor(void* object) {
  CommandResult* _this = reinterpret_cast< CommandResult* >(object);
  (void)_this;
}
void CommandResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandResult& CommandResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandResult_motioncontroller_2eproto.base);
  return *internal_default_instance();
}


void CommandResult::Clear() {
// @@protoc_insertion_point(message_clear_start:motioncontroller.CommandResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string command_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "motioncontroller.CommandResult.command_result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:motioncontroller.CommandResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command_result = 1;
  if (this->command_result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command_result().data(), static_cast<int>(this->_internal_command_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "motioncontroller.CommandResult.command_result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motioncontroller.CommandResult)
  return target;
}

size_t CommandResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motioncontroller.CommandResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command_result = 1;
  if (this->command_result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motioncontroller.CommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motioncontroller.CommandResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motioncontroller.CommandResult)
    MergeFrom(*source);
  }
}

void CommandResult::MergeFrom(const CommandResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motioncontroller.CommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command_result().size() > 0) {
    _internal_set_command_result(from._internal_command_result());
  }
}

void CommandResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motioncontroller.CommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResult::CopyFrom(const CommandResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motioncontroller.CommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResult::IsInitialized() const {
  return true;
}

void CommandResult::InternalSwap(CommandResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  command_result_.Swap(&other->command_result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Digital2Analog::InitAsDefaultInstance() {
}
class Digital2Analog::_Internal {
 public:
};

Digital2Analog::Digital2Analog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:motioncontroller.Digital2Analog)
}
Digital2Analog::Digital2Analog(const Digital2Analog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_name().empty()) {
    channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel_name(),
      GetArena());
  }
  channel_voltage_ = from.channel_voltage_;
  // @@protoc_insertion_point(copy_constructor:motioncontroller.Digital2Analog)
}

void Digital2Analog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Digital2Analog_motioncontroller_2eproto.base);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_voltage_ = 0;
}

Digital2Analog::~Digital2Analog() {
  // @@protoc_insertion_point(destructor:motioncontroller.Digital2Analog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Digital2Analog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Digital2Analog::ArenaDtor(void* object) {
  Digital2Analog* _this = reinterpret_cast< Digital2Analog* >(object);
  (void)_this;
}
void Digital2Analog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Digital2Analog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Digital2Analog& Digital2Analog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Digital2Analog_motioncontroller_2eproto.base);
  return *internal_default_instance();
}


void Digital2Analog::Clear() {
// @@protoc_insertion_point(message_clear_start:motioncontroller.Digital2Analog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel_voltage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Digital2Analog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "motioncontroller.Digital2Analog.channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float channel_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Digital2Analog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:motioncontroller.Digital2Analog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "motioncontroller.Digital2Analog.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // float channel_voltage = 2;
  if (!(this->channel_voltage() <= 0 && this->channel_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motioncontroller.Digital2Analog)
  return target;
}

size_t Digital2Analog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motioncontroller.Digital2Analog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // float channel_voltage = 2;
  if (!(this->channel_voltage() <= 0 && this->channel_voltage() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Digital2Analog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motioncontroller.Digital2Analog)
  GOOGLE_DCHECK_NE(&from, this);
  const Digital2Analog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Digital2Analog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motioncontroller.Digital2Analog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motioncontroller.Digital2Analog)
    MergeFrom(*source);
  }
}

void Digital2Analog::MergeFrom(const Digital2Analog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motioncontroller.Digital2Analog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {
    _internal_set_channel_name(from._internal_channel_name());
  }
  if (!(from.channel_voltage() <= 0 && from.channel_voltage() >= 0)) {
    _internal_set_channel_voltage(from._internal_channel_voltage());
  }
}

void Digital2Analog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motioncontroller.Digital2Analog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Digital2Analog::CopyFrom(const Digital2Analog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motioncontroller.Digital2Analog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Digital2Analog::IsInitialized() const {
  return true;
}

void Digital2Analog::InternalSwap(Digital2Analog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(channel_voltage_, other->channel_voltage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Digital2Analog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Analog2Digital::InitAsDefaultInstance() {
}
class Analog2Digital::_Internal {
 public:
};

Analog2Digital::Analog2Digital(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:motioncontroller.Analog2Digital)
}
Analog2Digital::Analog2Digital(const Analog2Digital& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel_voltage_1_, &from.channel_voltage_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_voltage_8_) -
    reinterpret_cast<char*>(&channel_voltage_1_)) + sizeof(channel_voltage_8_));
  // @@protoc_insertion_point(copy_constructor:motioncontroller.Analog2Digital)
}

void Analog2Digital::SharedCtor() {
  ::memset(&channel_voltage_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_voltage_8_) -
      reinterpret_cast<char*>(&channel_voltage_1_)) + sizeof(channel_voltage_8_));
}

Analog2Digital::~Analog2Digital() {
  // @@protoc_insertion_point(destructor:motioncontroller.Analog2Digital)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Analog2Digital::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Analog2Digital::ArenaDtor(void* object) {
  Analog2Digital* _this = reinterpret_cast< Analog2Digital* >(object);
  (void)_this;
}
void Analog2Digital::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Analog2Digital::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Analog2Digital& Analog2Digital::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Analog2Digital_motioncontroller_2eproto.base);
  return *internal_default_instance();
}


void Analog2Digital::Clear() {
// @@protoc_insertion_point(message_clear_start:motioncontroller.Analog2Digital)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_voltage_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_voltage_8_) -
      reinterpret_cast<char*>(&channel_voltage_1_)) + sizeof(channel_voltage_8_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Analog2Digital::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float channel_voltage_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          channel_voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel_voltage_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          channel_voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel_voltage_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          channel_voltage_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel_voltage_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          channel_voltage_4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel_voltage_5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          channel_voltage_5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel_voltage_6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          channel_voltage_6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel_voltage_7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          channel_voltage_7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float channel_voltage_8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          channel_voltage_8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Analog2Digital::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:motioncontroller.Analog2Digital)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float channel_voltage_1 = 1;
  if (!(this->channel_voltage_1() <= 0 && this->channel_voltage_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_channel_voltage_1(), target);
  }

  // float channel_voltage_2 = 2;
  if (!(this->channel_voltage_2() <= 0 && this->channel_voltage_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_channel_voltage_2(), target);
  }

  // float channel_voltage_3 = 3;
  if (!(this->channel_voltage_3() <= 0 && this->channel_voltage_3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_channel_voltage_3(), target);
  }

  // float channel_voltage_4 = 4;
  if (!(this->channel_voltage_4() <= 0 && this->channel_voltage_4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_channel_voltage_4(), target);
  }

  // float channel_voltage_5 = 5;
  if (!(this->channel_voltage_5() <= 0 && this->channel_voltage_5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_channel_voltage_5(), target);
  }

  // float channel_voltage_6 = 6;
  if (!(this->channel_voltage_6() <= 0 && this->channel_voltage_6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_channel_voltage_6(), target);
  }

  // float channel_voltage_7 = 7;
  if (!(this->channel_voltage_7() <= 0 && this->channel_voltage_7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_channel_voltage_7(), target);
  }

  // float channel_voltage_8 = 8;
  if (!(this->channel_voltage_8() <= 0 && this->channel_voltage_8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_channel_voltage_8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motioncontroller.Analog2Digital)
  return target;
}

size_t Analog2Digital::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motioncontroller.Analog2Digital)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float channel_voltage_1 = 1;
  if (!(this->channel_voltage_1() <= 0 && this->channel_voltage_1() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel_voltage_2 = 2;
  if (!(this->channel_voltage_2() <= 0 && this->channel_voltage_2() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel_voltage_3 = 3;
  if (!(this->channel_voltage_3() <= 0 && this->channel_voltage_3() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel_voltage_4 = 4;
  if (!(this->channel_voltage_4() <= 0 && this->channel_voltage_4() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel_voltage_5 = 5;
  if (!(this->channel_voltage_5() <= 0 && this->channel_voltage_5() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel_voltage_6 = 6;
  if (!(this->channel_voltage_6() <= 0 && this->channel_voltage_6() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel_voltage_7 = 7;
  if (!(this->channel_voltage_7() <= 0 && this->channel_voltage_7() >= 0)) {
    total_size += 1 + 4;
  }

  // float channel_voltage_8 = 8;
  if (!(this->channel_voltage_8() <= 0 && this->channel_voltage_8() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Analog2Digital::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motioncontroller.Analog2Digital)
  GOOGLE_DCHECK_NE(&from, this);
  const Analog2Digital* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Analog2Digital>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motioncontroller.Analog2Digital)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motioncontroller.Analog2Digital)
    MergeFrom(*source);
  }
}

void Analog2Digital::MergeFrom(const Analog2Digital& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motioncontroller.Analog2Digital)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.channel_voltage_1() <= 0 && from.channel_voltage_1() >= 0)) {
    _internal_set_channel_voltage_1(from._internal_channel_voltage_1());
  }
  if (!(from.channel_voltage_2() <= 0 && from.channel_voltage_2() >= 0)) {
    _internal_set_channel_voltage_2(from._internal_channel_voltage_2());
  }
  if (!(from.channel_voltage_3() <= 0 && from.channel_voltage_3() >= 0)) {
    _internal_set_channel_voltage_3(from._internal_channel_voltage_3());
  }
  if (!(from.channel_voltage_4() <= 0 && from.channel_voltage_4() >= 0)) {
    _internal_set_channel_voltage_4(from._internal_channel_voltage_4());
  }
  if (!(from.channel_voltage_5() <= 0 && from.channel_voltage_5() >= 0)) {
    _internal_set_channel_voltage_5(from._internal_channel_voltage_5());
  }
  if (!(from.channel_voltage_6() <= 0 && from.channel_voltage_6() >= 0)) {
    _internal_set_channel_voltage_6(from._internal_channel_voltage_6());
  }
  if (!(from.channel_voltage_7() <= 0 && from.channel_voltage_7() >= 0)) {
    _internal_set_channel_voltage_7(from._internal_channel_voltage_7());
  }
  if (!(from.channel_voltage_8() <= 0 && from.channel_voltage_8() >= 0)) {
    _internal_set_channel_voltage_8(from._internal_channel_voltage_8());
  }
}

void Analog2Digital::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motioncontroller.Analog2Digital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Analog2Digital::CopyFrom(const Analog2Digital& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motioncontroller.Analog2Digital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Analog2Digital::IsInitialized() const {
  return true;
}

void Analog2Digital::InternalSwap(Analog2Digital* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Analog2Digital, channel_voltage_8_)
      + sizeof(Analog2Digital::channel_voltage_8_)
      - PROTOBUF_FIELD_OFFSET(Analog2Digital, channel_voltage_1_)>(
          reinterpret_cast<char*>(&channel_voltage_1_),
          reinterpret_cast<char*>(&other->channel_voltage_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Analog2Digital::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Analog2DigitalConfig::InitAsDefaultInstance() {
}
class Analog2DigitalConfig::_Internal {
 public:
};

Analog2DigitalConfig::Analog2DigitalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:motioncontroller.Analog2DigitalConfig)
}
Analog2DigitalConfig::Analog2DigitalConfig(const Analog2DigitalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gain_, &from.gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_rate_) -
    reinterpret_cast<char*>(&gain_)) + sizeof(data_rate_));
  // @@protoc_insertion_point(copy_constructor:motioncontroller.Analog2DigitalConfig)
}

void Analog2DigitalConfig::SharedCtor() {
  ::memset(&gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_rate_) -
      reinterpret_cast<char*>(&gain_)) + sizeof(data_rate_));
}

Analog2DigitalConfig::~Analog2DigitalConfig() {
  // @@protoc_insertion_point(destructor:motioncontroller.Analog2DigitalConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Analog2DigitalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Analog2DigitalConfig::ArenaDtor(void* object) {
  Analog2DigitalConfig* _this = reinterpret_cast< Analog2DigitalConfig* >(object);
  (void)_this;
}
void Analog2DigitalConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Analog2DigitalConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Analog2DigitalConfig& Analog2DigitalConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Analog2DigitalConfig_motioncontroller_2eproto.base);
  return *internal_default_instance();
}


void Analog2DigitalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:motioncontroller.Analog2DigitalConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_rate_) -
      reinterpret_cast<char*>(&gain_)) + sizeof(data_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Analog2DigitalConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Analog2DigitalConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:motioncontroller.Analog2DigitalConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gain = 1;
  if (this->gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gain(), target);
  }

  // int32 data_rate = 2;
  if (this->data_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motioncontroller.Analog2DigitalConfig)
  return target;
}

size_t Analog2DigitalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motioncontroller.Analog2DigitalConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gain = 1;
  if (this->gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gain());
  }

  // int32 data_rate = 2;
  if (this->data_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Analog2DigitalConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motioncontroller.Analog2DigitalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Analog2DigitalConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Analog2DigitalConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motioncontroller.Analog2DigitalConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motioncontroller.Analog2DigitalConfig)
    MergeFrom(*source);
  }
}

void Analog2DigitalConfig::MergeFrom(const Analog2DigitalConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motioncontroller.Analog2DigitalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gain() != 0) {
    _internal_set_gain(from._internal_gain());
  }
  if (from.data_rate() != 0) {
    _internal_set_data_rate(from._internal_data_rate());
  }
}

void Analog2DigitalConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motioncontroller.Analog2DigitalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Analog2DigitalConfig::CopyFrom(const Analog2DigitalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motioncontroller.Analog2DigitalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Analog2DigitalConfig::IsInitialized() const {
  return true;
}

void Analog2DigitalConfig::InternalSwap(Analog2DigitalConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Analog2DigitalConfig, data_rate_)
      + sizeof(Analog2DigitalConfig::data_rate_)
      - PROTOBUF_FIELD_OFFSET(Analog2DigitalConfig, gain_)>(
          reinterpret_cast<char*>(&gain_),
          reinterpret_cast<char*>(&other->gain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Analog2DigitalConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetDiffChnAnalog2Digital::InitAsDefaultInstance() {
}
class SetDiffChnAnalog2Digital::_Internal {
 public:
};

SetDiffChnAnalog2Digital::SetDiffChnAnalog2Digital(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:motioncontroller.SetDiffChnAnalog2Digital)
}
SetDiffChnAnalog2Digital::SetDiffChnAnalog2Digital(const SetDiffChnAnalog2Digital& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:motioncontroller.SetDiffChnAnalog2Digital)
}

void SetDiffChnAnalog2Digital::SharedCtor() {
  channel_id_ = 0;
}

SetDiffChnAnalog2Digital::~SetDiffChnAnalog2Digital() {
  // @@protoc_insertion_point(destructor:motioncontroller.SetDiffChnAnalog2Digital)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetDiffChnAnalog2Digital::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetDiffChnAnalog2Digital::ArenaDtor(void* object) {
  SetDiffChnAnalog2Digital* _this = reinterpret_cast< SetDiffChnAnalog2Digital* >(object);
  (void)_this;
}
void SetDiffChnAnalog2Digital::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetDiffChnAnalog2Digital::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetDiffChnAnalog2Digital& SetDiffChnAnalog2Digital::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetDiffChnAnalog2Digital_motioncontroller_2eproto.base);
  return *internal_default_instance();
}


void SetDiffChnAnalog2Digital::Clear() {
// @@protoc_insertion_point(message_clear_start:motioncontroller.SetDiffChnAnalog2Digital)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDiffChnAnalog2Digital::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDiffChnAnalog2Digital::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:motioncontroller.SetDiffChnAnalog2Digital)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel_id = 1;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motioncontroller.SetDiffChnAnalog2Digital)
  return target;
}

size_t SetDiffChnAnalog2Digital::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motioncontroller.SetDiffChnAnalog2Digital)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDiffChnAnalog2Digital::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motioncontroller.SetDiffChnAnalog2Digital)
  GOOGLE_DCHECK_NE(&from, this);
  const SetDiffChnAnalog2Digital* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetDiffChnAnalog2Digital>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motioncontroller.SetDiffChnAnalog2Digital)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motioncontroller.SetDiffChnAnalog2Digital)
    MergeFrom(*source);
  }
}

void SetDiffChnAnalog2Digital::MergeFrom(const SetDiffChnAnalog2Digital& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motioncontroller.SetDiffChnAnalog2Digital)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void SetDiffChnAnalog2Digital::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motioncontroller.SetDiffChnAnalog2Digital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDiffChnAnalog2Digital::CopyFrom(const SetDiffChnAnalog2Digital& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motioncontroller.SetDiffChnAnalog2Digital)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDiffChnAnalog2Digital::IsInitialized() const {
  return true;
}

void SetDiffChnAnalog2Digital::InternalSwap(SetDiffChnAnalog2Digital* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDiffChnAnalog2Digital::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace motioncontroller
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::motioncontroller::HelloRequest* Arena::CreateMaybeMessage< ::motioncontroller::HelloRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::motioncontroller::HelloRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::motioncontroller::HelloReply* Arena::CreateMaybeMessage< ::motioncontroller::HelloReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::motioncontroller::HelloReply >(arena);
}
template<> PROTOBUF_NOINLINE ::motioncontroller::CommandResult* Arena::CreateMaybeMessage< ::motioncontroller::CommandResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::motioncontroller::CommandResult >(arena);
}
template<> PROTOBUF_NOINLINE ::motioncontroller::Digital2Analog* Arena::CreateMaybeMessage< ::motioncontroller::Digital2Analog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::motioncontroller::Digital2Analog >(arena);
}
template<> PROTOBUF_NOINLINE ::motioncontroller::Analog2Digital* Arena::CreateMaybeMessage< ::motioncontroller::Analog2Digital >(Arena* arena) {
  return Arena::CreateMessageInternal< ::motioncontroller::Analog2Digital >(arena);
}
template<> PROTOBUF_NOINLINE ::motioncontroller::Analog2DigitalConfig* Arena::CreateMaybeMessage< ::motioncontroller::Analog2DigitalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::motioncontroller::Analog2DigitalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::motioncontroller::SetDiffChnAnalog2Digital* Arena::CreateMaybeMessage< ::motioncontroller::SetDiffChnAnalog2Digital >(Arena* arena) {
  return Arena::CreateMessageInternal< ::motioncontroller::SetDiffChnAnalog2Digital >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
