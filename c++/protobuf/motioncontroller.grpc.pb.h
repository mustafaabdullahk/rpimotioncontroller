// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: motioncontroller.proto
#ifndef GRPC_motioncontroller_2eproto__INCLUDED
#define GRPC_motioncontroller_2eproto__INCLUDED

#include "motioncontroller.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace motioncontroller {

class DeviceService final {
 public:
  static constexpr char const* service_full_name() {
    return "motioncontroller.DeviceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::motioncontroller::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::motioncontroller::Analog2Digital>> GetDigitalValues(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::motioncontroller::Analog2Digital>>(GetDigitalValuesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::motioncontroller::Analog2Digital>> AsyncGetDigitalValues(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::motioncontroller::Analog2Digital>>(AsyncGetDigitalValuesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::motioncontroller::Analog2Digital>> PrepareAsyncGetDigitalValues(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::motioncontroller::Analog2Digital>>(PrepareAsyncGetDigitalValuesRaw(context, request, cq));
    }
    virtual ::grpc::Status OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::motioncontroller::CommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>> AsyncOutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>>(AsyncOutVoltageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>> PrepareAsyncOutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>>(PrepareAsyncOutVoltageRaw(context, request, cq));
    }
    virtual ::grpc::Status ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::motioncontroller::CommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>> AsyncConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>>(AsyncConfigureAnalog2DigitalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>> PrepareAsyncConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>>(PrepareAsyncConfigureAnalog2DigitalRaw(context, request, cq));
    }
    virtual ::grpc::Status SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::motioncontroller::CommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>> AsyncSetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>>(AsyncSetDiffChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>> PrepareAsyncSetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>>(PrepareAsyncSetDiffChannelRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDigitalValues(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::motioncontroller::Analog2Digital>* reactor) = 0;
      #else
      virtual void GetDigitalValues(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::motioncontroller::Analog2Digital>* reactor) = 0;
      #endif
      virtual void OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::motioncontroller::Analog2Digital>* GetDigitalValuesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::motioncontroller::Analog2Digital>* AsyncGetDigitalValuesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::motioncontroller::Analog2Digital>* PrepareAsyncGetDigitalValuesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>* AsyncOutVoltageRaw(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>* PrepareAsyncOutVoltageRaw(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>* AsyncConfigureAnalog2DigitalRaw(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>* PrepareAsyncConfigureAnalog2DigitalRaw(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>* AsyncSetDiffChannelRaw(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::motioncontroller::CommandResult>* PrepareAsyncSetDiffChannelRaw(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::motioncontroller::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::motioncontroller::Analog2Digital>> GetDigitalValues(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::motioncontroller::Analog2Digital>>(GetDigitalValuesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::motioncontroller::Analog2Digital>> AsyncGetDigitalValues(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::motioncontroller::Analog2Digital>>(AsyncGetDigitalValuesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::motioncontroller::Analog2Digital>> PrepareAsyncGetDigitalValues(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::motioncontroller::Analog2Digital>>(PrepareAsyncGetDigitalValuesRaw(context, request, cq));
    }
    ::grpc::Status OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::motioncontroller::CommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>> AsyncOutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>>(AsyncOutVoltageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>> PrepareAsyncOutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>>(PrepareAsyncOutVoltageRaw(context, request, cq));
    }
    ::grpc::Status ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::motioncontroller::CommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>> AsyncConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>>(AsyncConfigureAnalog2DigitalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>> PrepareAsyncConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>>(PrepareAsyncConfigureAnalog2DigitalRaw(context, request, cq));
    }
    ::grpc::Status SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::motioncontroller::CommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>> AsyncSetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>>(AsyncSetDiffChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>> PrepareAsyncSetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>>(PrepareAsyncSetDiffChannelRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDigitalValues(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::motioncontroller::Analog2Digital>* reactor) override;
      #else
      void GetDigitalValues(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::motioncontroller::Analog2Digital>* reactor) override;
      #endif
      void OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::motioncontroller::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::motioncontroller::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::motioncontroller::Analog2Digital>* GetDigitalValuesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::motioncontroller::Analog2Digital>* AsyncGetDigitalValuesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::motioncontroller::Analog2Digital>* PrepareAsyncGetDigitalValuesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* AsyncOutVoltageRaw(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* PrepareAsyncOutVoltageRaw(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* AsyncConfigureAnalog2DigitalRaw(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* PrepareAsyncConfigureAnalog2DigitalRaw(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* AsyncSetDiffChannelRaw(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* PrepareAsyncSetDiffChannelRaw(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDigitalValues_;
    const ::grpc::internal::RpcMethod rpcmethod_OutVoltage_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfigureAnalog2Digital_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDiffChannel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response);
    virtual ::grpc::Status GetDigitalValues(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::motioncontroller::Analog2Digital>* writer);
    virtual ::grpc::Status OutVoltage(::grpc::ServerContext* context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response);
    virtual ::grpc::Status ConfigureAnalog2Digital(::grpc::ServerContext* context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response);
    virtual ::grpc::Status SetDiffChannel(::grpc::ServerContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::motioncontroller::HelloRequest* /*request*/, ::motioncontroller::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::motioncontroller::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::motioncontroller::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDigitalValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDigitalValues() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetDigitalValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDigitalValues(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::motioncontroller::Analog2Digital>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDigitalValues(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::motioncontroller::Analog2Digital>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OutVoltage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OutVoltage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OutVoltage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutVoltage(::grpc::ServerContext* /*context*/, const ::motioncontroller::Digital2Analog* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOutVoltage(::grpc::ServerContext* context, ::motioncontroller::Digital2Analog* request, ::grpc::ServerAsyncResponseWriter< ::motioncontroller::CommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfigureAnalog2Digital : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConfigureAnalog2Digital() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ConfigureAnalog2Digital() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureAnalog2Digital(::grpc::ServerContext* /*context*/, const ::motioncontroller::Analog2DigitalConfig* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigureAnalog2Digital(::grpc::ServerContext* context, ::motioncontroller::Analog2DigitalConfig* request, ::grpc::ServerAsyncResponseWriter< ::motioncontroller::CommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDiffChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDiffChannel() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetDiffChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDiffChannel(::grpc::ServerContext* /*context*/, const ::motioncontroller::SetDiffChnAnalog2Digital* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDiffChannel(::grpc::ServerContext* context, ::motioncontroller::SetDiffChnAnalog2Digital* request, ::grpc::ServerAsyncResponseWriter< ::motioncontroller::CommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_GetDigitalValues<WithAsyncMethod_OutVoltage<WithAsyncMethod_ConfigureAnalog2Digital<WithAsyncMethod_SetDiffChannel<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SayHello() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::motioncontroller::HelloRequest, ::motioncontroller::HelloReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response) { return this->SayHello(context, request, response); }));}
    void SetMessageAllocatorFor_SayHello(
        ::grpc::experimental::MessageAllocator< ::motioncontroller::HelloRequest, ::motioncontroller::HelloReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::motioncontroller::HelloRequest, ::motioncontroller::HelloReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::motioncontroller::HelloRequest* /*request*/, ::motioncontroller::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::motioncontroller::HelloRequest* /*request*/, ::motioncontroller::HelloReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SayHello(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::motioncontroller::HelloRequest* /*request*/, ::motioncontroller::HelloReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDigitalValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDigitalValues() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::Empty, ::motioncontroller::Analog2Digital>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request) { return this->GetDigitalValues(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetDigitalValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDigitalValues(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::motioncontroller::Analog2Digital>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::motioncontroller::Analog2Digital>* GetDigitalValues(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::motioncontroller::Analog2Digital>* GetDigitalValues(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OutVoltage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OutVoltage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::motioncontroller::Digital2Analog, ::motioncontroller::CommandResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response) { return this->OutVoltage(context, request, response); }));}
    void SetMessageAllocatorFor_OutVoltage(
        ::grpc::experimental::MessageAllocator< ::motioncontroller::Digital2Analog, ::motioncontroller::CommandResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::motioncontroller::Digital2Analog, ::motioncontroller::CommandResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OutVoltage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutVoltage(::grpc::ServerContext* /*context*/, const ::motioncontroller::Digital2Analog* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OutVoltage(
      ::grpc::CallbackServerContext* /*context*/, const ::motioncontroller::Digital2Analog* /*request*/, ::motioncontroller::CommandResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OutVoltage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::motioncontroller::Digital2Analog* /*request*/, ::motioncontroller::CommandResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ConfigureAnalog2Digital : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ConfigureAnalog2Digital() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::motioncontroller::Analog2DigitalConfig, ::motioncontroller::CommandResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response) { return this->ConfigureAnalog2Digital(context, request, response); }));}
    void SetMessageAllocatorFor_ConfigureAnalog2Digital(
        ::grpc::experimental::MessageAllocator< ::motioncontroller::Analog2DigitalConfig, ::motioncontroller::CommandResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::motioncontroller::Analog2DigitalConfig, ::motioncontroller::CommandResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ConfigureAnalog2Digital() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureAnalog2Digital(::grpc::ServerContext* /*context*/, const ::motioncontroller::Analog2DigitalConfig* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ConfigureAnalog2Digital(
      ::grpc::CallbackServerContext* /*context*/, const ::motioncontroller::Analog2DigitalConfig* /*request*/, ::motioncontroller::CommandResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ConfigureAnalog2Digital(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::motioncontroller::Analog2DigitalConfig* /*request*/, ::motioncontroller::CommandResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDiffChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetDiffChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::motioncontroller::SetDiffChnAnalog2Digital, ::motioncontroller::CommandResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response) { return this->SetDiffChannel(context, request, response); }));}
    void SetMessageAllocatorFor_SetDiffChannel(
        ::grpc::experimental::MessageAllocator< ::motioncontroller::SetDiffChnAnalog2Digital, ::motioncontroller::CommandResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::motioncontroller::SetDiffChnAnalog2Digital, ::motioncontroller::CommandResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDiffChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDiffChannel(::grpc::ServerContext* /*context*/, const ::motioncontroller::SetDiffChnAnalog2Digital* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDiffChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::motioncontroller::SetDiffChnAnalog2Digital* /*request*/, ::motioncontroller::CommandResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDiffChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::motioncontroller::SetDiffChnAnalog2Digital* /*request*/, ::motioncontroller::CommandResult* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_GetDigitalValues<ExperimentalWithCallbackMethod_OutVoltage<ExperimentalWithCallbackMethod_ConfigureAnalog2Digital<ExperimentalWithCallbackMethod_SetDiffChannel<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_GetDigitalValues<ExperimentalWithCallbackMethod_OutVoltage<ExperimentalWithCallbackMethod_ConfigureAnalog2Digital<ExperimentalWithCallbackMethod_SetDiffChannel<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::motioncontroller::HelloRequest* /*request*/, ::motioncontroller::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDigitalValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDigitalValues() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetDigitalValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDigitalValues(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::motioncontroller::Analog2Digital>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OutVoltage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OutVoltage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OutVoltage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutVoltage(::grpc::ServerContext* /*context*/, const ::motioncontroller::Digital2Analog* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfigureAnalog2Digital : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConfigureAnalog2Digital() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ConfigureAnalog2Digital() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureAnalog2Digital(::grpc::ServerContext* /*context*/, const ::motioncontroller::Analog2DigitalConfig* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDiffChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDiffChannel() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetDiffChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDiffChannel(::grpc::ServerContext* /*context*/, const ::motioncontroller::SetDiffChnAnalog2Digital* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::motioncontroller::HelloRequest* /*request*/, ::motioncontroller::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDigitalValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDigitalValues() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetDigitalValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDigitalValues(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::motioncontroller::Analog2Digital>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDigitalValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OutVoltage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OutVoltage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OutVoltage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutVoltage(::grpc::ServerContext* /*context*/, const ::motioncontroller::Digital2Analog* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOutVoltage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfigureAnalog2Digital : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConfigureAnalog2Digital() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ConfigureAnalog2Digital() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureAnalog2Digital(::grpc::ServerContext* /*context*/, const ::motioncontroller::Analog2DigitalConfig* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigureAnalog2Digital(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDiffChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDiffChannel() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetDiffChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDiffChannel(::grpc::ServerContext* /*context*/, const ::motioncontroller::SetDiffChnAnalog2Digital* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDiffChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SayHello() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayHello(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::motioncontroller::HelloRequest* /*request*/, ::motioncontroller::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SayHello(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDigitalValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDigitalValues() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetDigitalValues(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDigitalValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDigitalValues(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::motioncontroller::Analog2Digital>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetDigitalValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetDigitalValues(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OutVoltage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OutVoltage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OutVoltage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OutVoltage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutVoltage(::grpc::ServerContext* /*context*/, const ::motioncontroller::Digital2Analog* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OutVoltage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OutVoltage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ConfigureAnalog2Digital : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ConfigureAnalog2Digital() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConfigureAnalog2Digital(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ConfigureAnalog2Digital() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigureAnalog2Digital(::grpc::ServerContext* /*context*/, const ::motioncontroller::Analog2DigitalConfig* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ConfigureAnalog2Digital(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ConfigureAnalog2Digital(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDiffChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDiffChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDiffChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDiffChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDiffChannel(::grpc::ServerContext* /*context*/, const ::motioncontroller::SetDiffChnAnalog2Digital* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDiffChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDiffChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::motioncontroller::HelloRequest, ::motioncontroller::HelloReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::motioncontroller::HelloRequest, ::motioncontroller::HelloReply>* streamer) {
                       return this->StreamedSayHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::motioncontroller::HelloRequest* /*request*/, ::motioncontroller::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::motioncontroller::HelloRequest,::motioncontroller::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OutVoltage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OutVoltage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::motioncontroller::Digital2Analog, ::motioncontroller::CommandResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::motioncontroller::Digital2Analog, ::motioncontroller::CommandResult>* streamer) {
                       return this->StreamedOutVoltage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OutVoltage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OutVoltage(::grpc::ServerContext* /*context*/, const ::motioncontroller::Digital2Analog* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOutVoltage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::motioncontroller::Digital2Analog,::motioncontroller::CommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConfigureAnalog2Digital : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConfigureAnalog2Digital() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::motioncontroller::Analog2DigitalConfig, ::motioncontroller::CommandResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::motioncontroller::Analog2DigitalConfig, ::motioncontroller::CommandResult>* streamer) {
                       return this->StreamedConfigureAnalog2Digital(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConfigureAnalog2Digital() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConfigureAnalog2Digital(::grpc::ServerContext* /*context*/, const ::motioncontroller::Analog2DigitalConfig* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfigureAnalog2Digital(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::motioncontroller::Analog2DigitalConfig,::motioncontroller::CommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDiffChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDiffChannel() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::motioncontroller::SetDiffChnAnalog2Digital, ::motioncontroller::CommandResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::motioncontroller::SetDiffChnAnalog2Digital, ::motioncontroller::CommandResult>* streamer) {
                       return this->StreamedSetDiffChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDiffChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDiffChannel(::grpc::ServerContext* /*context*/, const ::motioncontroller::SetDiffChnAnalog2Digital* /*request*/, ::motioncontroller::CommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDiffChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::motioncontroller::SetDiffChnAnalog2Digital,::motioncontroller::CommandResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_OutVoltage<WithStreamedUnaryMethod_ConfigureAnalog2Digital<WithStreamedUnaryMethod_SetDiffChannel<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetDigitalValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetDigitalValues() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::Empty, ::motioncontroller::Analog2Digital>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::Empty, ::motioncontroller::Analog2Digital>* streamer) {
                       return this->StreamedGetDigitalValues(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetDigitalValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDigitalValues(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::motioncontroller::Analog2Digital>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetDigitalValues(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::motioncontroller::Analog2Digital>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetDigitalValues<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithSplitStreamingMethod_GetDigitalValues<WithStreamedUnaryMethod_OutVoltage<WithStreamedUnaryMethod_ConfigureAnalog2Digital<WithStreamedUnaryMethod_SetDiffChannel<Service > > > > > StreamedService;
};

}  // namespace motioncontroller


#endif  // GRPC_motioncontroller_2eproto__INCLUDED
