// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: motioncontroller.proto

#include "motioncontroller.pb.h"
#include "motioncontroller.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace motioncontroller {

static const char* DeviceService_method_names[] = {
  "/motioncontroller.DeviceService/SayHello",
  "/motioncontroller.DeviceService/GetDigitalValues",
  "/motioncontroller.DeviceService/OutVoltage",
  "/motioncontroller.DeviceService/ConfigureAnalog2Digital",
  "/motioncontroller.DeviceService/SetDiffChannel",
};

std::unique_ptr< DeviceService::Stub> DeviceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceService::Stub> stub(new DeviceService::Stub(channel));
  return stub;
}

DeviceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(DeviceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDigitalValues_(DeviceService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_OutVoltage_(DeviceService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigureAnalog2Digital_(DeviceService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDiffChannel_(DeviceService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceService::Stub::SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::motioncontroller::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void DeviceService::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motioncontroller::HelloReply>* DeviceService::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motioncontroller::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::motioncontroller::HelloReply>* DeviceService::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::motioncontroller::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::motioncontroller::Analog2Digital>* DeviceService::Stub::GetDigitalValuesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::motioncontroller::Analog2Digital>::Create(channel_.get(), rpcmethod_GetDigitalValues_, context, request);
}

void DeviceService::Stub::experimental_async::GetDigitalValues(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::motioncontroller::Analog2Digital>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::motioncontroller::Analog2Digital>::Create(stub_->channel_.get(), stub_->rpcmethod_GetDigitalValues_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::motioncontroller::Analog2Digital>* DeviceService::Stub::AsyncGetDigitalValuesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::motioncontroller::Analog2Digital>::Create(channel_.get(), cq, rpcmethod_GetDigitalValues_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::motioncontroller::Analog2Digital>* DeviceService::Stub::PrepareAsyncGetDigitalValuesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::motioncontroller::Analog2Digital>::Create(channel_.get(), cq, rpcmethod_GetDigitalValues_, context, request, false, nullptr);
}

::grpc::Status DeviceService::Stub::OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::motioncontroller::CommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OutVoltage_, context, request, response);
}

void DeviceService::Stub::experimental_async::OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OutVoltage_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::OutVoltage(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OutVoltage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* DeviceService::Stub::PrepareAsyncOutVoltageRaw(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motioncontroller::CommandResult>::Create(channel_.get(), cq, rpcmethod_OutVoltage_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* DeviceService::Stub::AsyncOutVoltageRaw(::grpc::ClientContext* context, const ::motioncontroller::Digital2Analog& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOutVoltageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::motioncontroller::CommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConfigureAnalog2Digital_, context, request, response);
}

void DeviceService::Stub::experimental_async::ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConfigureAnalog2Digital_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::ConfigureAnalog2Digital(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConfigureAnalog2Digital_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* DeviceService::Stub::PrepareAsyncConfigureAnalog2DigitalRaw(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motioncontroller::CommandResult>::Create(channel_.get(), cq, rpcmethod_ConfigureAnalog2Digital_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* DeviceService::Stub::AsyncConfigureAnalog2DigitalRaw(::grpc::ClientContext* context, const ::motioncontroller::Analog2DigitalConfig& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfigureAnalog2DigitalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::motioncontroller::CommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDiffChannel_, context, request, response);
}

void DeviceService::Stub::experimental_async::SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDiffChannel_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::SetDiffChannel(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDiffChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* DeviceService::Stub::PrepareAsyncSetDiffChannelRaw(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motioncontroller::CommandResult>::Create(channel_.get(), cq, rpcmethod_SetDiffChannel_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::motioncontroller::CommandResult>* DeviceService::Stub::AsyncSetDiffChannelRaw(::grpc::ClientContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDiffChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

DeviceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::motioncontroller::HelloRequest, ::motioncontroller::HelloReply>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::motioncontroller::HelloRequest* req,
             ::motioncontroller::HelloReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DeviceService::Service, ::google::protobuf::Empty, ::motioncontroller::Analog2Digital>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::motioncontroller::Analog2Digital>* writer) {
               return service->GetDigitalValues(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::motioncontroller::Digital2Analog, ::motioncontroller::CommandResult>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::motioncontroller::Digital2Analog* req,
             ::motioncontroller::CommandResult* resp) {
               return service->OutVoltage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::motioncontroller::Analog2DigitalConfig, ::motioncontroller::CommandResult>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::motioncontroller::Analog2DigitalConfig* req,
             ::motioncontroller::CommandResult* resp) {
               return service->ConfigureAnalog2Digital(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::motioncontroller::SetDiffChnAnalog2Digital, ::motioncontroller::CommandResult>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::motioncontroller::SetDiffChnAnalog2Digital* req,
             ::motioncontroller::CommandResult* resp) {
               return service->SetDiffChannel(ctx, req, resp);
             }, this)));
}

DeviceService::Service::~Service() {
}

::grpc::Status DeviceService::Service::SayHello(::grpc::ServerContext* context, const ::motioncontroller::HelloRequest* request, ::motioncontroller::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetDigitalValues(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::motioncontroller::Analog2Digital>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::OutVoltage(::grpc::ServerContext* context, const ::motioncontroller::Digital2Analog* request, ::motioncontroller::CommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::ConfigureAnalog2Digital(::grpc::ServerContext* context, const ::motioncontroller::Analog2DigitalConfig* request, ::motioncontroller::CommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::SetDiffChannel(::grpc::ServerContext* context, const ::motioncontroller::SetDiffChnAnalog2Digital* request, ::motioncontroller::CommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace motioncontroller

